import reflex as rximport yfinance as yfimport datetime as dtimport plotly.graph_objects as go#parte de analisis para diversificaciónimport pandas as pdimport numpy as npfrom groq import Groqimport os####grok key"""API_KEY = os.getenv("APIKEYGROQ")####client = Groq(api_key=API_KEY)class estado(rx.State):    vista_actual: str = "inicio"    ticker: str = ""    cantidad: str = ""    fecha: str = ""    datos_analizados :list = []        # Setters    def set_ticker(self, value: str):            self.ticker = value    def set_cantidad(self, value: str):            self.cantidad = value    def set_fecha(self, value: str):            self.fecha = value    def cambiar_vista(self, vista: str):        self.vista_actual = vista    def set_busqueda(self, value: str):        self.busqueda = value    def set_mensaje(self, value: str):        self.mensaje = value    def confirmar_ticker(self):            # Acá podés validar o hacer algo con self.ticker            print(f"Ticker confirmado: {self.ticker}")    def confirmar_cantidad(self):            print(f"Cantidad confirmada: {self.cantidad}")    def confirmar_fecha(self):            print(f"Fecha confirmada: {self.fecha}")        # Tu portafolio actual    portafolio: list[dict] = []    def calcular_variacion(self, historico, periodo):        if len(historico) < 2:            return 0        if periodo == '1wk':            dias = 5        elif periodo == '1mo':            dias = 20        else:            dias = 1        if len(historico) > dias:            precio_inicial = historico['Close'].iloc[-dias]            precio_final = historico['Close'].iloc[-1]            return ((precio_final - precio_inicial) / precio_inicial) * 100        return 0    def calcular_var_compra(self, precio_actual, precio_compra):        if precio_compra == 0:            return 0        return ((precio_actual - precio_compra) / precio_compra) * 100    def analisis_portafolio_completo(self):        # 1. Inicializar lista para resultados        analisis_completo = []        for accion_portafolio in self.portafolio:            # 3. Extraer datos de la acción del portafolio            ticker = accion_portafolio["ticker"]            precio_compra = accion_portafolio["precio_compra"]            # 4. Obtener datos actuales de yfinance            accion = yf.Ticker(ticker)            info = accion.info            historico = accion.history(period="1y")            precio_actual = info.get('currentPrice', 0)            # 5. Calcular todas las métricas            datos_analizados = {                "ticker": ticker,                "nombre": info.get('longName', ticker),                "precio_actual": precio_actual,                "precio_compra": precio_compra,                "volumen": info.get('volume'),                "pe_ratio": info.get('trailingPE'),                "market_cap": info.get('marketCap'),                "dividend_yield": info.get('dividendYield'),                "deuda": info.get('totalDebt'),                "profit_margin": info.get('profitMargins'),                "beta": info.get('beta'),                "var_dia": info.get('regularMarketChangePercent'),                "var_semana": self.calcular_variacion(historico, '1wk'),                "var_mes": self.calcular_variacion(historico, '1mo'),                "var_desde_compra": self.calcular_var_compra(precio_actual, precio_compra)            }            # 6. Agregar a resultados            analisis_completo.append(datos_analizados)        # 7. Retornar o guardar todos los análisis        self.datos_analizados = analisis_completo        return analisis_completo    @rx.var    def analisis_accion_completo(self) -> dict:        # Si no hay búsqueda o portafolio vacío        if not self.busqueda.upper() or not self.portafolio:            return {}        # Buscar acción        for accion_portafolio in self.portafolio:            ticker = accion_portafolio["ticker"]            if ticker == self.busqueda.upper():                try:                    precio_compra = accion_portafolio["precio_compra"]                    accion = yf.Ticker(ticker)                    info = accion.info                    historico = accion.history(period="1y")                    precio_actual = info.get('currentPrice', 0)                    datos_analizados = {                        "ticker": ticker,                        "nombre": info.get('longName', ticker),                        "precio_actual": precio_actual,                        "precio_compra": float(precio_compra),                        "volumen": info.get('volume'),                        "pe_ratio": float(info.get('trailingPE')),                        "market_cap": info.get('marketCap'),                        "dividend_yield": info.get('dividendYield'),                        "deuda": info.get('totalDebt'),                        "profit_margin": float(info.get('profitMargins')),                        "beta": info.get('beta'),                        "var_dia": float(info.get('regularMarketChangePercent')),                        "var_semana": float(self.calcular_variacion(historico, '1wk')),                        "var_mes": float(self.calcular_variacion(historico, '1mo')),                        "var_desde_compra": float(self.calcular_var_compra(precio_actual, precio_compra))                    }                    return datos_analizados                except datos_analizados != {}:                    datos_analizados = {}                    continue                except Exception as e:                    print(f"Error: {e}")                    return {}  # Si falla yfinance        return {}  # Si no encuentra el ticker    def agregar_accion_portafolio(self):        tck = self.ticker.upper()        montoinv = float(self.cantidad) if self.cantidad.strip() else 0.0        # CONVERTIR FECHA al formato yfinance        fecha_obj = dt.datetime.strptime(self.fecha, "%Y-%m-%d")        fecha_fin = (fecha_obj + dt.timedelta(days=1)).strftime("%Y-%m-%d")        YFDATE = fecha_obj.strftime("%Y-%m-%d")  # Convierte a formato yfinance        precio_actual = yf.Ticker(tck).info.get("currentPrice", 0)        #aca se setea el monto al comprar la accion, obviamente en base a eso se saca cuanto crecio el cap        try:            acc = yf.Ticker(tck)            hist = acc.history(start=YFDATE, end=fecha_fin)            for i,accion in enumerate(self.portafolio) :                posei = accion["ticker"]                if posei == tck:                    ###pensar como hacer lo de precio compra"                    tick = tck                    montoinv = accion["monto_invertido"] + montoinv                    if len(hist) > 0:                        precio_en_fecha = hist['Close'].iloc[0]                    else:                        #####si no hay precio en la fecha de compra###                        precio_actual = acc.info.get('currentPrice', 0)                        if precio_actual:                            precio_en_fecha = precio_actual                        else:                            # Si tampoco hay precio actual, mostrar error al usuario                            print(f"No se encontraron datos para {tck} en la fecha {self.fecha}")                            return  # Salir sin agregar al portafolio                    # Calcular cantidad de acciones compradas                    cantidad_acciones = montoinv / precio_en_fecha                    cantidad_acciones += accion["cantidad"]                    nueva_accion = {                        "ticker": tck,                        "precio_compra": precio_en_fecha,                        "cantidad": cantidad_acciones,                        "monto_invertido": montoinv,                        "fecha_compra": self.fecha,                        "rendimiento": accion["rendimiento"],                        "precio_actual": precio_actual,                    }                    self.portafolio.pop(i)                    self.portafolio.append(nueva_accion)                    # Limpiar                    self.ticker = ""                    self.cantidad = ""                    self.fecha = ""                    self.cambiar_vista("inicio")            else:                if len(hist) > 0:                    precio_en_fecha = hist['Close'].iloc[0]                else:           #####si no hay precio en la fecha de compra###                    precio_actual = acc.info.get('currentPrice',0)                    if precio_actual:                        precio_en_fecha = precio_actual                    else:                            # Si tampoco hay precio actual, mostrar error al usuario                            print(f"No se encontraron datos para {tck} en la fecha {self.fecha}")                            return  # Salir sin agregar al portafolio                    # Calcular cantidad de acciones compradas                cantidad_acciones = montoinv / precio_en_fecha                precio_actual = acc.info.get('currentPrice', 0)                if precio_en_fecha > 0:                    rendimiento = float((precio_actual - precio_en_fecha) / precio_en_fecha) * 100                else:                    rendimiento = 0                nueva_accion = {                    "ticker": tck,                    "precio_compra": precio_en_fecha,                    "cantidad": cantidad_acciones,                    "monto_invertido": montoinv,                    "fecha_compra": self.fecha,                    "rendimiento" : f"{rendimiento:.2f}%",                    "precio_actual": precio_actual,                }                self.portafolio.append(nueva_accion)                self.analisis_portafolio_completo()                # Limpiar                self.ticker = ""                self.cantidad = ""                self.fecha = ""                self.cambiar_vista("inicio")        except Exception as e:            print(f"Error: {e}")    intento_quita: str = ""    cantidad_quitar: float = 0.0    def set_intento_quita(self, value: str):        self.intento_quita = value.upper()    def set_cantidad_quitar(self, value: str):        self.cantidad_quitar = int(value)    def quitar_accion(self):        for i, accion in enumerate(self.portafolio):            if accion["ticker"] == self.intento_quita:                cantidad_actual = accion["cantidad"]  # Acciones que tiene                precio_compra = accion["precio_compra"]  # Precio por acción                # Convertir dólares a acciones                acciones_a_quitar = self.cantidad_quitar / precio_compra                # Nueva cantidad de acciones                nueva_cantidad = cantidad_actual - acciones_a_quitar                if nueva_cantidad > 0:                    nuevo_monto = nueva_cantidad * precio_compra                    stock = yf.Ticker(accion["ticker"])                    precio_actual = stock.info.get('currentPrice', 0)                    rendimiento = ((precio_actual - precio_compra) / precio_compra) * 100 if precio_compra > 0 else 0                    self.portafolio[i] = {                        "ticker": accion["ticker"],                        "precio_compra": precio_compra,                        "cantidad": nueva_cantidad,                        "monto_invertido": round(nuevo_monto, 2),                        "fecha_compra": accion["fecha_compra"],                        "rendimiento": f"{rendimiento:.2f}%",                        "precio_actual": precio_actual,                    }                    self.cambiar_vista("inicio")                    break                else:                    self.portafolio.pop(i)                    self.cambiar_vista("inicio")                break### esta funcion, no se usa(de momento)    def calculo_accion(self):        ticker = yf.Ticker(self.ticker.upper())        monto = float(self.cantidad)        fechacompra =  self.fecha        fechahoy = dt.datetime.now()        #aca lo que hago es sacar la cantidad de acciones en base a cuando lo compro y el montO        periodoacciones = ticker.history(start=fechacompra, end=fechahoy)#####esto te tira un dataframe        preciocompra = periodoacciones["Close"].iloc[0]        cant_acciones = monto / preciocompra    def guardarenportafolio(self):        self.agregar_accion_portafolio()        self.cambiar_vista("inicio")        self.correlacion()    @rx.var    def inversion_total(self) -> float:        return sum(accion["monto_invertido"] for accion in self.portafolio)    @rx.var    def valor_ganancia(self) -> float:        ganancia_total = 0.0        for accion in self.portafolio:            precio_compra = accion["precio_compra"]            cantidad = accion["cantidad"]            ticker = accion["ticker"]                # Precio actual            stock = yf.Ticker(ticker)            precio_actual = stock.info.get('currentPrice', 0)            valor_inicial= float(precio_compra * cantidad)            valor_act = float(precio_actual *cantidad)            ganancia_total+= (valor_act  - valor_inicial)        return ganancia_total    @rx.var    def redondeoganancia(self)-> str:        red = self.valor_ganancia        return f"{red:.2f}"    @rx.var    def figura_torta(self)->go.Figure:        if not self.portafolio:            return go.Figure()  # Figura vacía si no hay datos        labels = [accion["ticker"] for accion in self.portafolio]        values = [accion["precio_actual"]* accion["cantidad"] for accion in self.portafolio]        return go.Figure(data=[go.Pie(labels=labels, values=values)])    @rx.var    def portafoliototal(self)-> str:        port= float(self.valor_ganancia + self.inversion_total)        return f"{port:.2f}"    @rx.var    def max_rentabilidad(self)-> list[dict] :        lista_rendimientos = []        for accion in self.portafolio:            rendi = float(accion["rendimiento"].strip().replace("%",""))            rendimiento = {"nombre" :accion["ticker"],                           "rendimiento" : rendi                    }            lista_rendimientos.append(rendimiento)        #### ORDENAR de mayor a menor rendimiento        rentabilidad = sorted(lista_rendimientos, key=lambda x: x["rendimiento"], reverse=True)        return rentabilidad    @rx.var    def min_rentabilidad(self) -> list[dict]:        lista_rendimientos = []        for accion in self.portafolio:            rendi = float(accion["rendimiento"].strip().replace("%", ""))            rendimiento = {"nombre": accion["ticker"],                           "rendimiento": rendi                           }            lista_rendimientos.append(rendimiento)        #### ORDENAR de mayor a menor rendimiento        no_rentabilidad = sorted(lista_rendimientos, key=lambda x: x["rendimiento"], reverse=False)        return no_rentabilidad    #def chatbot(self, mensaje):      #  completion = client.chat.completions.create(      #       mensajes = "asesor": "usuario",    #       "contentenido" = mensaje,     #   )    #@rx.var    #def figura_portafolio(self) -> go.Figure:       # if not self.portafolio:       #     return go.Figure()  # Figura vacía si no hay datos#SE REQUIERE DE MEMORIA, UN SERVER, ALGO PARA TENER UNA SESIÓN"    #parte de correlación del portafolio    # Para cada acción en tu portafolio    matriz_valores: list = []    tickers_corr: list =[]    def correlacion(self):        precios = {}        for accion in self.portafolio:            ticker = accion["ticker"]            datos = yf.Ticker(ticker).history(period="1y")            precios[ticker] = datos["Close"]        dat_frame = pd.DataFrame(precios)        retornos = dat_frame.pct_change().dropna()        matriz = retornos.corr()        self.matriz_valores = matriz.values.tolist()  # Valores numéricos        self.tickers_corr = matriz.columns.tolist()  # Lista de tickers####todo estas vueltas, dado que reflex no acepta estados    ####parte para la busqueda de tickers####    busqueda: str = ""    def buscar_accion(self):        for accion in self.portafolio:            if self.busqueda.upper() == accion["ticker"]:                dat = yf.Ticker(self.busqueda.upper())            else:                dat = "no encontrado"        self.cambiar_vista("resultados_busqueda")    fecha_hoy = dt.datetime.now()    @rx.var    def grafico_accion(self) -> go.Figure:        if not self.busqueda.upper():  # Si está vacío            return go.Figure()        # Buscar la acción en el portafolio        accion_encontrada = None        for accion in self.portafolio:            if accion["ticker"] == self.busqueda.upper():                accion_encontrada = accion                break        if not accion_encontrada:            return go.Figure()        # Obtener datos        datos = yf.Ticker(self.busqueda.upper()).history(            start=accion_encontrada["fecha_compra"],            end=self.fecha_hoy        )        return go.Figure(            go.Scatter(                x=datos.index,                y=datos["Close"],                mode="lines"            )        )    @rx.var    def busqueda_match(self) -> dict:        for accion in self.portafolio:            if accion["ticker"] == self.busqueda.upper():                return accion        else:            return {}    @rx.var    def heatmap_correlacion(self)->go.Figure:            return go.Figure(        data=go.Heatmap(            z=self.matriz_valores,    # Valores de correlación            x=self.tickers_corr,      # Tickers eje X            y=self.tickers_corr,      # Tickers eje Y            colorscale= [                    [0.0, "rgb(0, 70, 140)"],    # azul petróleo (-1)                    [0.5, "rgb(240, 240, 240)"], # gris claro neutro (0)                    [1.0, "rgb(200, 30, 30)"],   # rojo intenso (+1)                                                ],            hoverongaps=False,            hovertemplate='%{x} vs %{y}: %{z:.2f}<extra></extra>'        ),        layout=go.Layout(            title="Matriz de Correlación",            xaxis_title="Acciones",            yaxis_title="Acciones"        )    )    ###parte de analisis de riesgo    #volatilidad individual    @rx.var    def volatilidadindividual(self)->float:        for accion in self.portafolio:            if accion["ticker"] == self.busqueda.upper():                tck = accion["ticker"]                datos = yf.Ticker(tck).history(period="1y")                retornos = datos["Close"].pct_change().dropna()                vol = retornos.std()                return vol        else:            return 0.0####volatilidad portafolio    @rx.var    def volatilidad_portafolio(self) -> float:        if len(self.portafolio) < 2:            return 0.0        # Obtener retornos de cada acción        retornos_dict = {}        for accion in self.portafolio:            ticker = accion["ticker"]            datos = yf.Ticker(ticker).history(period="1y")            retornos_dict[ticker] = datos["Close"].pct_change().dropna()        # DataFrame de retornos        df_retornos = pd.DataFrame(retornos_dict).dropna()        # Calcular pesos        pesos = np.array([            accion["monto_invertido"] / float(self.portafoliototal)            for accion in self.portafolio        ])        # Matriz de covarianza        matriz_cov = df_retornos.cov()        # Varianza del portafolio        varianza = pesos @ matriz_cov @ pesos        # Volatilidad (desviación estándar anualizada)        return float(np.sqrt(varianza) * np.sqrt(252))    @rx.var    def shape_ratio(self)->float:        if not self.portafolio:            return 0.0        # Valor actual total vs valor inicial total        valor_actual_total = sum(accion["cantidad"] * accion["precio_actual"] for accion in self.portafolio)        valor_inicial_total = sum(accion["monto_invertido"] for accion in self.portafolio)        rendimiento_port = (valor_actual_total - valor_inicial_total) / valor_inicial_total        volatilidad = self.volatilidad_portafolio        tasa_libre_de_riesgo = 0.03        if valor_actual_total == 0 or volatilidad == 0:            return 0.0        sh_ratio = (rendimiento_port - tasa_libre_de_riesgo) / volatilidad        return sh_ratio    @rx.var    def dividendos(self) -> list[dict]:        div = []        for accion in self.portafolio:            tck = accion["ticker"]            info = yf.Ticker(tck).info            # en caso de que la accion no tenga dividendos            if info.get("dividendYield") is None:                continue            div_historicos = yf.Ticker(tck).dividends            div_actual = info.get("dividendYield", 0)            div_prom_5 = info.get("fiveYearAvgDividendYield", 0)            div_ultimo = info.get("lastDividendValue", 0)            acc = {                "ticker": tck,                "histórico": float(div_historicos.mean()) if len(div_historicos) > 0 else 0,                "actual": div_actual,                "5años": div_prom_5,                "ultimo": div_ultimo,            }            div.append(acc)        return div    @rx.var    def ganancias_indi(self) -> list[dict]:        list_gan = []        for accion in self.portafolio:            tck = accion["ticker"]            precio_compra = float(accion["precio_compra"])            precio_actual = float(accion["precio_actual"])            monto_invertido = float(accion["monto_invertido"])            # Si monto_invertido representa dinero invertido:            acciones_compradas = monto_invertido / precio_compra            valor_actual = acciones_compradas * precio_actual            ganancia = valor_actual - monto_invertido            ganancia_accion ={            "ticker": tck,            "ganancia" : float(ganancia),            "porcentaje" : float((ganancia / monto_invertido) * 100)            }            list_gan.append(ganancia_accion)        return list_gan    ### parte del char bot    historial: list[dict] = []    nuevo_mensaje:str = ""    mensaje: str = ""    def resumen(self)-> str:        resumen = (f"""sos el asesor inteligente incorporado en un portafolio web, el usuario te consutara sobre su portafolio,"                   su deberas tener un contexto al dia sobre el mercado de capitales el usuario posee las siguientes acciones: \n""")        for accion in self.portafolio:            resumen += (f"""{accion['ticker']}: precio de compra:{accion["precio_compra"]}, cantidad adquirida:{accion["cantidad"]},"                        monto invertido: {accion["monto_invertido"]},fecha_compra: {accion["fecha_compra"]}, rendimiento:{accion["rendimiento"]}, precio actual{accion["precio_actual"]}\n""")        resumen+= f"""datos del portafolio en general: \n                    portafolio total:{self.portafoliototal}  \n                    ganancia: {self.redondeoganancia}\n                    volatilidad: {self.volatilidad_portafolio}\n                    correlacion de las acciones : {self.correlacion}\n                    """        resumen+= """con esta información actuaras como un asesor inteligente de los mayores fondos de inversion, seras concreto, directo,         y detallado, con una respuesta específica a lo que el usuario te pregunta, ademas, lo presentaras con subtítulos,          y espaciado, para que no resulte agobiante, no tenes que dar simplemente información, tenes que analizar, sacar conclusiones en base a cada dato, y en base a eso, dar siempre,         un punto de vista, tenes que ser metódico y poco blando, si el portafolio se puede mejorar, lo decís, si no tiene puntos fuertes, los mencionas, si tiene puntos débiles, los destacas          y mencionas como solucionarlos, la idea es que vos, siempre des una respuesta que ayude a entender los datos, no simplemente darlos, sino analizarlos.          deja espacios entre párrafos, agrega subtítulos, y no des al lector texto amontonado"""        return resumen    def obtener_respuesta(self):        mensajes_validos = []        for item in self.historial[-8:]:            if (isinstance(item, dict) and                    "role" in item and                    "content" in item):                mensajes_validos.append(item)        try:            respuesta = client.chat.completions.create(                messages=[                    {"role": "system", "content": self.resumen()},                    *mensajes_validos  # Últimos mensajes                ],                model="llama-3.3-70b-versatile",                temperature=0.7,                max_tokens=1024            )            return respuesta.choices[0].message.content        except Exception as e:            return f"Error: {str(e)}"    def procesar_mensaje(self):        if self.mensaje == "":            return ""        nuevo_mensaje = {"role": "user",                         "content": self.mensaje}        self.historial.append(nuevo_mensaje),        self.nuevo_mensaje = ""        respuesta = self.obtener_respuesta()        respu_bot = {"role": "assistant", "content": respuesta}        self.historial.append(respu_bot),        respu_bot = ""    def dar_contexto(self):        self.historial = []        resumen_porta = self.resumen()        self.historial.append(resumen_porta)    @rx.var    def histo (self)-> list[dict]:        histori = []        for msj in self.historial:            if isinstance(msj, dict):  ### el problema esta en que la lista tiene de todo, in isinstance, la limpio, dejo solo dict                if msj.get("role") not in ["system"]:                    histori.append({"role" :f"{msj["role"]}","content" : f"{msj["content"]}"})            else:                continue        return histori    @rx.var    def figura_crecimiento(self) -> go.Figure:        if not self.portafolio:            return go.Figure()        actual = float(self.portafoliototal)        # Suponemos que 'valor_ganancia' es la ganancia acumulada        valor_inicial = actual - self.valor_ganancia        if valor_inicial <= 0:            return go.Figure()        # Tasa de crecimiento anual compuesta (CAGR)        años_transcurridos = 1  # puedes ajustar si tienes más datos históricos        retorno = ((actual / valor_inicial) ** (1 / años_transcurridos)) - 1        # Límite para evitar tasas irreales (> 100% anual)        if retorno > 1:            retorno = 0.1  # 10% anual        elif retorno < 0:            retorno = 0        valores_proyectados = [actual * (1 + retorno) ** i for i in range(21)]        fig = go.Figure(            data=[                go.Scatter(                    x=[self.fecha_hoy.replace(year=self.fecha_hoy.year + i) for i in range(21)],                    y=valores_proyectados,                    mode="lines+markers",                    name="Proyección crecimiento",                    line=dict(width=3),                )            ]        )        fig.update_layout(            title="Proyección de crecimiento del portafolio (20 años)",            xaxis_title="Año",            yaxis_title="Valor proyectado",            template="plotly_dark",            hovermode="x unified",        )        return fig    @rx.var    def mrk_cap_indi(self) -> float:        if not self.portafolio:            return 0.0        for accion in self.portafolio:            if accion["ticker"] == self.busqueda.upper():                try:                    market_cap_data = yf.Ticker(accion["ticker"]).info.get("marketCap")                    if market_cap_data is None:                        return 0.0                    # Convertir a float (manejando tuplas)                    value = market_cap_data[0] if isinstance(market_cap_data, tuple) else market_cap_data                    return round(float(value), 2)                except Exception:                    return 0.0        return 0.0  # Ticker no encontrado    @rx.var    def pe_accion(self) -> str | None:        if not self.portafolio or not self.busqueda.upper():            return "No hay portafolio o búsqueda activa"        for accion in self.portafolio:            if accion["ticker"] == self.busqueda.upper():                try:                    acc = accion["ticker"]                    info = yf.Ticker(acc).info                    # Debug en consola del backend                    print(f"Buscando P/E para: {acc}")                    PE_ratio = info.get("trailingPE")                    forward_PE = info.get("forwardPE")                    print(f"trailingPE encontrado: {PE_ratio}")                    print(f"forwardPE encontrado: {forward_PE}")                    if PE_ratio is not None:                        mensaje = f"P/E Ratio: {PE_ratio:.2f}"                        if forward_PE is not None:                            mensaje += f"\nForward P/E: {forward_PE:.2f}"                        return mensaje                    else:                        # Buscar keys alternativas                        pe_keys = [key for key in info.keys() if 'pe' in key.lower()]                        return f"No trailingPE. Keys con 'pe': {pe_keys}"                except Exception as e:                    return f"Error: {str(e)}"        return "Acción no encontrada en portafolio"    @rx.var    def creci_indi(self)-> go.Figure | None:        for accion in self.portafolio:            if accion["ticker"] == self.busqueda.upper():                tck = accion["ticker"]                inversion= accion["monto_invertido"]                monto = float(accion["cantidad"] * accion["precio_actual"])                rendimiento = float(accion["rendimiento"].replace("%", ""))                años_transcu= 1.0                ###crecimiento acumilativo, averigual como gacer otra linea que cuente con periodicidad                retorno = ((monto / inversion)**(1/años_transcu))-1                # Límite para evitar tasas irreales (> 100% anual)                if retorno > 1:                    retorno = 0.1  # 10% anual                elif retorno < 0:                    retorno = 0                proyección = [monto * (1 + retorno) ** i for i in range(21)]                fig = go.Figure(                    data=[                        go.Scatter(                            x=[self.fecha_hoy.replace(year=self.fecha_hoy.year + i) for i in range(21)],                            y=proyección,                            mode="lines+markers",                            name="Proyección crecimiento",                            line=dict(width=3),                        )                    ]                )                fig.update_layout(                    title=f"crecimiento de {self.busqueda.upper()} (20 años)",                    xaxis_title="Año",                    yaxis_title="Valor proyectado",                    template="plotly_dark",                    hovermode="x unified",                )                return fig            else:                fig = go.Figure(None)                return fig    ###parte de enter    def enter_buscar(self, key:str):        if key == "Enter":            return self.buscar_accion()    def enter_quitar(self, key:str):        if key == "Enter":            return self.quitar_accion()    def enter_bot(self, key:str):        if key == "Enter":            return self.procesar_mensaje()    def enter_añadir(self, key:str):        if key == "Enter":            return self.guardarenportafolio()def navbar() -> rx.Component:    return rx.box(        rx.desktop_only(            rx.hstack(                rx.hstack(                    rx.image(                        src="logo.png",                        width="5.25em",                        height="auto",                        border_radius="25%",                    ),                    rx.heading("WALLET-PORT",size="7", weight="bold", color_scheme="mint"),                    align_items="center",),                rx.card(                    rx.box(rx.hstack(                        rx.heading("ganancia:", color_scheme="indigo"),                        rx.heading(estado.redondeoganancia, color_scheme="mint"),),),                    rx.box(rx.hstack(                        rx.heading("capital total:", color_scheme="indigo"),                        rx.heading(estado.portafoliototal, color_scheme="mint"),                    ),                    ),                ),                rx.hstack(                    rx.button(                        "INICIO",                        color_scheme="indigo",                        variant="ghost",                        size="3",                        on_click=lambda: estado.cambiar_vista("inicio"),                        _hover={                            "cursor": "pointer",                            "transform": "translateY(-2px)",  # Efecto de levantar                            "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                        },                        transition="all 0.3s ease"                    ),                    rx.menu.root(                        rx.menu.trigger(                            rx.button(                                rx.text("opciones", size="4", weight="bold", color_scheme="indigo"),                                rx.icon("chevron-down"),                                weight="bold",                                variant="ghost",                                size="3",                                _hover={                                    "cursor": "pointer",                                    "transform": "translateY(-2px)",  # Efecto de levantar                                    "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                                },                                transition="all 0.3s ease"                            ),                        ),                        rx.menu.content(                            rx.menu.item("ASESOR INTELIGENTE", on_click=lambda: estado.cambiar_vista("infobot"), color_scheme="mint"),                            rx.separator(orientation="horizontal", color_scheme="indigo"),                            rx.menu.item("mayores rendimientos y perdidas", on_click=lambda: estado.cambiar_vista("max min"), color_scheme="mint"),                        ),                    ),                    rx.center(                        rx.input(                            placeholder="obtenga un análisis profundo de su acción.EJ:tsla..",                            on_change= lambda: estado.set_busqueda,                            value= estado.busqueda.upper(),                            size="3",                            width="400px",                            on_key_down = estado.enter_buscar                        ),                        rx.button(                            "BUSCAR",                            on_click=lambda: estado.buscar_accion(),                            color_scheme="mint",                            size="2",                            _hover={                                "cursor": "pointer",                                "transform": "translateY(-2px)",  # Efecto de levantar                                "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                            },                            transition="all 0.3s ease"                        ),                        spacing="4",                    ),                    justify="end",                    spacing="5",                ),                justify="between",                align_items="center",            ),        ),        rx.mobile_and_tablet(            rx.hstack(                rx.hstack(                    rx.image(src="logo.jpg", width="2em", height="auto", border_radius="25%"),                    rx.heading("WALLET-PORT", size="7", weight="bold", color_scheme="mint"),                    align_items="center",                ),                rx.card(                    rx.box(rx.hstack(                        rx.heading("capital total:", color_scheme="indigo"),                        rx.heading(estado.portafoliototal, color_scheme="mint"),                    ),                    ), ),                rx.menu.root(                    rx.menu.trigger(rx.icon("menu", size=50)),                    rx.menu.content(                        rx.menu.item("Inicio", size="4", weight="medium", color_scheme="indigo"),                        rx.menu.sub(                            rx.menu.sub_trigger(""),                            rx.menu.sub_content(                                rx.menu.content(                                    rx.menu.item("ASESOR INTELIGENTE", on_click=lambda:estado.cambiar_vista("asesor")),                                    rx.menu.item("mayores rendimientos y perdidas",                                                 on_click=lambda: estado.cambiar_vista("mas menos")),                                ),                            ),                        ),                        rx.menu.item("Buscar"),                    ),                    justify="end",                ),                justify="between",                align_items="center",            ),        ),        color_scheme="dark_blue",        padding="1em",        width="100%",    )def acciones():    estado.agregar_accion_portafolio()def index():    return rx.vstack(        navbar(),        rx.separator(orientation= "vertical", color_scheme="mint", size= "4"),        rx.cond(            estado.vista_actual == "inicio",            # VISTA INICIO            rx.vstack(                rx.heading("mi portafolio", size="6", weight="bold", color_scheme="mint"),                rx.separator(orientation="horizontal", color_scheme="mint", size= "3"),                rx.hstack(                    rx.heading("añadir acción al portafolio", size="3", color_scheme="indigo", weight="bold"),                    rx.button("añadir", on_click=lambda: estado.cambiar_vista("agregar acción"), color_scheme="mint",                                _hover = {                                    "cursor": "pointer",                                    "transform": "translateY(-2px)",  # Efecto de levantar                                    "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                                },                                transition = "all 0.3s ease",                                ),                    rx.heading("quitar accion de mi portafolio", size="3", color_scheme="indigo"),                    rx.button("quitar", on_click= lambda :estado.cambiar_vista("quitar accion"), color_scheme="mint",                                _hover = {                                    "cursor": "pointer",                                    "transform": "translateY(-2px)",  # Efecto de levantar                                    "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                                },                                transition = "all 0.3s ease"                                                          ),                ),                rx.separator(orientation="horizontal", color_scheme="mint", size= "4", spacing="9"),                rx.vstack(                    rx.section(                    rx.heading("lista de acciones en el portafolio", color_scheme="indigo"),                    rx.scroll_area(                        rx.cond(estado.portafolio.length() == 0, rx.box("portafolio vacio", size="6", color_scheme="mint"),),                        rx.cond(estado.portafolio.length() != 0,                        rx.table.root(                            rx.table.header(                                rx.table.row(                                    rx.table.column_header_cell("ticker"),                                    rx.table.column_header_cell("monto"),                                    rx.table.column_header_cell("rendimiento"),                                    color_scheme="mint",                                ),                            ),                            rx.table.body(                                    rx.foreach(                                        estado.portafolio, lambda accion: rx.table.row(                                            rx.table.column_header_cell(accion["ticker"]),                                            rx.table.cell(accion["monto_invertido"]),                                            rx.table.cell(accion["rendimiento"]),                                        color_scheme="mint",                                        ),                                    ),                                ),                            ),                            ),                            width="100%",                        ),                        rx.section(rx.vstack(                            rx.heading("ganancias", color_scheme="indigo"),                            rx.cond(estado.portafolio.length() != 0,                                    rx.table.root(                                        rx.table.header(                                            rx.table.row(                                                rx.table.column_header_cell("inversión"),                                                rx.table.column_header_cell("ganancias"),                                                rx.table.column_header_cell("total"),                                            color_scheme="mint",                                            ),                                        ),                                        rx.table.body(                                            rx.table.row(                                                rx.table.row_header_cell(estado.inversion_total),                                                rx.table.cell(estado.redondeoganancia),                                                rx.table.cell(estado.portafoliototal),                                            color_scheme="mint",                                            ),                                        ),                                        width="100%",                                    ),                                    ),                    ),                    ),                        rx.vstack(                        rx.section(                        rx.heading("GRAFICO DE DIVERSIFICACIÓN", color_scheme="mint"),                        rx.plotly(data=estado.figura_torta)),                        rx.section(                        rx.heading("correlación", color_scheme="mint", size= "5"),                            rx.plotly(data=estado.heatmap_correlacion)                            ),                        ),                        ),                        rx.section(                            rx.heading("analisis de riesgo", color_scheme="mint"),                            rx.separator(orientation="horizontal", size="3"),                            rx.card(                                rx.heading("VOLATILIDAD DEL PORTAFOLIO", color_scheme="indigo"),                                rx.text(f"{estado.volatilidad_portafolio:.2f}%"),                            ),                            rx.separator(orientation="horizontal", size="3"),                            rx.card(                                rx.heading("shape ratio"),                                rx.text(f"{estado.shape_ratio:.2f}%"),                                color_scheme="mint",                            ),                        spacing = "5"                        ),                        rx.section(                            rx.heading("dividendos", color_scheme="indigo"),                            rx.table.root(                                rx.table.header(                                    rx.table.row(                                        rx.table.column_header_cell("ticker"),                                        rx.table.column_header_cell("ult. dividendo"),                                        rx.table.column_header_cell("actual"),                                        rx.table.column_header_cell("histórico"),                                        rx.table.column_header_cell("prom.5 años"),                                        color_scheme="mint",                                    ),                                ),                                rx.table.body(                                    rx.foreach(                                        estado.dividendos,                                        lambda div: rx.table.row(                                            rx.table.cell(div["ticker"]),                                            rx.table.cell(div["ultimo"]),                                            rx.table.cell(div["actual"]),                                            rx.table.cell(f"{div['histórico']:.2f}"),                                            rx.table.cell(div["5años"]),                                        color_scheme="mint",                                        ),                                    ),                                ),                                width="100%",                            ),                        ),                        rx.section(                            rx.heading("analisis de crecimiento futuro", color_scheme="mint"),                        rx.plotly(data=estado.figura_crecimiento),                            rx.card(rx.flex(                                rx.heading("""este análisis no cuenta con                                 la periodicidad de aportes.""", color_scheme="mint"),),                            ),                            )                ),                        align_items="center",                        justify="center"                    ),                    ),        rx.cond(            estado.vista_actual == "agregar acción",                rx.vstack(                    rx.heading("AÑADE UNA ACCION A TU PORTAFOLIO", size="5", weight="bold", color_scheme="indigo"),                    rx.vstack(                        rx.section(rx.hstack(                        rx.heading("defina el ticker que desea añadir", color_scheme="mint"),                        rx.input(placeholder="AAPL", on_change=estado.set_ticker, color_scheme="mint"),),),                        rx.section(                        rx.hstack(rx.heading("cantidad invertida(en dólares)", color_scheme="mint"),                        rx.input(type="number", on_change=estado.set_cantidad, color_scheme="mint"),),),                        rx.section(                        rx.hstack(rx.heading("fecha de adquisición", color_scheme="mint"),                        rx.input(type="date", on_change= estado.set_fecha,                        on_key_up = estado.enter_añadir                                 ),),),                        rx.separator(orientation="horizontal", color_scheme="mint", size="1"),                        rx.button("guardar acción" , on_click=estado.guardarenportafolio, color_scheme="indigo",                            _hover = {                                "cursor": "pointer",                                "transform": "translateY(-2px)",  # Efecto de levantar                                "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                            },                            transition = "all 0.3s ease"                                  ),                        rx.text("tenga en cuenta que desde la fecha de adquisición, hasta la fecha actual, el monto habrá variado, introduzca el monto que compro, no el que posee"),                        rx.text("si se añade una accion, ya incluida al portafolio, se sumara a la porción inicial"),                        rx.text("al añadir, la web se tomará unos segundas para realizar el análisis de datos"),                    ),                    spacing="4",                    align_items="center"                ),        ),        rx.cond(            estado.vista_actual =="resultados_busqueda",            rx.vstack(            rx.heading(estado.busqueda.upper(), color_scheme="mint", size= "5", weight="bold"),            rx.heading(f"gráfico de evolución de {estado.busqueda.upper()} desde la fecha de compra", color_scheme="indigo"),            rx.plotly(data=estado.grafico_accion),            rx.section(                rx.heading("DATOS", align="center", color_scheme="mint"),                rx.cond(                    estado.analisis_accion_completo.get("ticker") != "",                rx.grid(                        rx.card(                            rx.heading("Precio Actual", size="3", color_scheme="mint"),                            rx.text(f"${estado.analisis_accion_completo.get('precio_actual', 0):.2f}", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Precio al momento de Compra", size="3", color_scheme="mint"),                            rx.text(f"${estado.analisis_accion_completo.get('precio_compra', 0):.2f}", color_scheme="mint"),                            background="mint",                            color="indigo",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Volumen", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('volumen', 'N/A'):.2f}", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("P/E Ratio", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('pe_ratio', 0):.2f}", color_scheme="mint"),                            background="mint",                            color="indigo",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Market Cap", size="3", color_scheme="mint"),                            rx.text(f"${estado.analisis_accion_completo.get('market_cap', 0):,.0f}", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Deuda total de la empresa", size="3", color_scheme="mint"),                            rx.text(f"${estado.analisis_accion_completo.get('deuda', 0):,.0f}", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Profit Margin", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('profit_margin', 0):.2%}", color_scheme="mint"),                            background="mint",                            color="indigo",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Beta", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('beta', 0):.2f}", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Var. Día", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('var_dia', 0):.2f}%", color_scheme="mint"),                            background="mint",                            color="indigo",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Var. Semana", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('var_semana', 0):.2f}%", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Var. Mes", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('var_mes', 0):.2f}%", color_scheme="mint"),                            background="mint",                            color="indigo",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                        rx.card(                            rx.heading("Var. Desde Compra", size="3", color_scheme="mint"),                            rx.text(f"{estado.analisis_accion_completo.get('var_desde_compra', 0):.2f}%", color_scheme="mint"),                            background="indigo",                            color="mint",                            padding="25px",                            border_radius="20px",                            width="350px",                        ),                    columns="2",                    spacing="6",                    background="mint",                    align= "center"                ),            ),            ),            rx.section(                rx.heading("rendimiento", color_scheme="indigo", size="5", weight="bold"),                rx.card(rx.text(estado.busqueda_match["rendimiento"], weight="bold" ), background="mint", color="mint", padding="25px"),            ),            rx.section(                rx.heading("volatilidad de la accion(último año)",color_scheme="indigo"),                    rx.card(rx.text(f"{estado.volatilidadindividual:.2f}", weight="bold"), background="mint", color="mint", padding="25px"),            ),            rx.section(                rx.heading("análisis de crecimiento futuro", color_scheme="indigo"),                rx.plotly(data=estado.creci_indi),            ),            ),        ),        rx.cond(            estado.vista_actual == "max min",            rx.hstack(            rx.section(rx.vstack(rx.heading("TUS ACCIONES MAS RENTABLES", color_scheme="mint"),                                 rx.scroll_area(                                     rx.table.root(                                         rx.table.header(                                             rx.table.row(                                                 rx.table.column_header_cell("ticker"),                                                 rx.table.column_header_cell("porcentaje de ganancia"),                                             ),                                         ),                                         rx.table.body(                                             rx.foreach(                                                 estado.max_rentabilidad,                                                 lambda rentabilidad: rx.table.row(                                                     rx.table.cell(rentabilidad["nombre"]),                                                     rx.table.cell(rentabilidad["rendimiento"]),                                                 ),                                             ),                                         ),                                         width="100%",                                     ),                )            ),),            rx.spacer(),            rx.separator(orientation="vertical", size="3", spacing="9", color="mint",),            rx.spacer(),            rx.section(rx.vstack(rx.heading("TUS ACCIONES MENOS RENTABLES", color_scheme="indigo"),                rx.scroll_area(rx.table.root(                     rx.table.header(                     rx.table.row(                     rx.table.column_header_cell("ticker"),                    rx.table.column_header_cell("porcentaje de ganancia"),                            ),                    ),                    rx.table.body(                    rx.foreach(                    estado.min_rentabilidad,                    lambda no_rentabilidad: rx.table.row(                    rx.table.cell(no_rentabilidad["nombre"]),                    rx.table.cell(no_rentabilidad["rendimiento"]),                        ),                        ),                    ),                    width="100%",                ),                )            ),            ),        ),        ),        rx.cond(            estado.vista_actual == "infobot",            rx.vstack(                rx.moment(on_mount=estado.dar_contexto()),                rx.heading("Asesor Inteligente", color_scheme="indigo"),                rx.scroll_area(                    rx.foreach(                        estado.histo,                        lambda histori : rx.cond(                            histori["role"] == "user",                            rx.card(rx.text(histori["content"], weight="bold"), bg = "indigo", width="30%", size="2"),                            rx.card(rx.text(histori["content"],  letter_spacing="0.05em", letter_height = "2", weight= "bold"), bg = "mint", size = "5"),                        ),                        ),                rx.card(                    rx.flex(                        rx.text_area(                            placeholder="Hace un resumen de mi portafolio...",                            on_change=estado.set_mensaje,                            value = estado.mensaje,                            size="3",                            width="100%",                            on_key_down= estado.enter_bot                        ),                        rx.button(                            "Enviar",                             on_click=estado.procesar_mensaje,                            _hover={                                "cursor": "pointer",                                "transform": "translateY(-2px)",  # Efecto de levantar                                "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                            },                            transition="all 0.3s ease"                        ),                        width="100%",                    ),                        direction="column",                        align="center",                    ),                    size="5",                    padding="1",                ),),),        rx.cond(            estado.vista_actual == "quitar accion",            rx.section(rx.hstack(                rx.heading("accion que desea quitar", color_scheme="indigo"),                rx.spacer(),                rx.separator(orientation="vertical", size="3", spacing="9", color="mint",),                rx.text_area(                placeholder="EJ, tsla",                on_change=estado.set_intento_quita(),                ),                rx.spacer(),                rx.separator(orientation="vertical", size="3", spacing="9", color="mint", ),                rx.heading("cantidad que de sea quitar", color_scheme="indigo"),                rx.spacer(),                rx.text_area(                    placeholder="EJ, 890",                    type = "number",                    on_change=estado.set_cantidad_quitar(),                    on_key_down=  estado.enter_quitar                ),),                rx.spacer(),                rx.button(                    "quitar",                    on_click=lambda : estado.quitar_accion(),                    _hover={                        "cursor": "pointer",                        "transform": "translateY(-2px)",  # Efecto de levantar                        "box_shadow": "0 4px 8px 0 rgba(0,0,0,0.2)"                    },                    color_scheme="mint",                    align="end",                    size="4",                    padding="5",                ),                spacing = "9"            ),        ),        spacing="9",        background_color="#0f1419",        min_height="100vh",        align_items="center",        width="100%",        pading="1em",    ),app = rx.App()app.add_page(index)